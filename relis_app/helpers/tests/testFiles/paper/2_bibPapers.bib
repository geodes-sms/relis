@ARTICLE{Ahmad2020,
  author = {Ahmad, Muhammad Waqas and Anwar, Muhammad Waseem and Azam, Farooque and Rasheed, Yawar and Ghani, Usman and Ahmad, Mukhtar},
  journal = {Lecture Notes in Computer Science},
  title = {AutoNet: Meta-model for Seamless Integration of Timed Automata and Colored Petri Nets},
  year = {2020},
  pages = {307--319},
  volume = {12133},
  doi = {10.1007/978-3-030-47679-3\_26},
  paper = {http://dx.doi.org/10.1007/978-3-030-47679-3\_26}
}
@INBOOK{Alexander2007,
  author = {Alexander, Perry},
  pages = {263--276},
  publisher = {Morgan Kaufmann},
  title = {15 - Domain Interactions},
  year = {2007},
  address = {Burlington},
  series = {Systems on Silicon},
  type = {Book Section},
  abstract = {It is noted that the decisions made locally in one domain can have impacts on system-level requirements and other domain specific requirements. Rosetta defines an interaction as a collection of mechanisms for describing how information flows between modeling domains. Each interaction defines three kinds of information transfer. Translators define how information is transformed as it flows through a parameter shared by two facets. Translators handle both information translation and coordination of the communication process. Functors define transformations of facets from one domain to another. Because facets are simply Rosetta values, these transformations take the form of functions whose domain and range include facet types. Furthermore, algebra combinators, or simply combinators define mechanisms for combining two facets to produce a new facet. The primary use for combinator is to provide a capability for composing and refining or abstracting two facets in a single step. Moreover, combinators are like functors, except that the domain of a combinator must include two facets that can be composed into a single facet.}
}